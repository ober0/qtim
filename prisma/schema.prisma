// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["users", "articles"]
}

model Password {
  id        String   @id @default(uuid()) @map("id")
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  user      User?

  @@map("password")
  @@schema("users")
}

model Person {
  id         String   @id @default(uuid()) @map("id")
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  patronymic String?  @map("patronymic")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")
  User       User?

  @@index([firstName, lastName])
  @@index([firstName, patronymic])
  @@index([firstName, lastName, patronymic])
  @@map("persons")
  @@schema("users")
}

model User {
  id         String @id @default(uuid())
  email      String @unique
  frontendId Int    @default(autoincrement()) @map("frontend_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  password   Password @relation(fields: [passwordId], references: [id])
  passwordId String   @unique

  person   Person @relation(fields: [personId], references: [id])
  personId String @unique

  @@map("users")
  @@schema("users")
}
